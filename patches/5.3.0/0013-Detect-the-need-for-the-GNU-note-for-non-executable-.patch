From 2371883be0f6d1e116487e74d43fb1341ea18805 Mon Sep 17 00:00:00 2001
From: Samuel Hym <samuel@tarides.com>
Date: Mon, 13 Jan 2025 12:07:00 +0100
Subject: [PATCH 13/21] Detect the need for the GNU note for non-executable
 stack

Detect during `configure` whether the C compiler generates a
`.note.GNU-stack` section to mark it explicitly as non-executable
Define a macro in `m.h` and a configure variable so that OCaml can do as
cc does

Detail: without the explicit `.note.GNU-stack` section, recent versions
of GNU ld show, at least on some targets:
/usr/bin/ld: warning: .... missing .note.GNU-stack section implies executable stack
/usr/bin/ld: NOTE: This behaviour is deprecated and will be removed in a future version of the linker
---
 aclocal.m4          |  24 ++++++++++++++++++++++++
 configure           | Bin 705055 -> 706768 bytes
 configure.ac        |   3 +++
 runtime/caml/m.h.in |   5 +++++
 4 files changed, 32 insertions(+)

diff --git a/aclocal.m4 b/aclocal.m4
index b17e11d511..9c6feb1034 100644
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -526,6 +526,30 @@ AC_DEFUN([OCAML_CC_SUPPORTS_ATOMIC], [
   OCAML_CC_RESTORE_VARIABLES
 ])
 
+# Detects whether the C compiler generates an explicit .note.GNU-stack section
+# to mark the stack as non-executable, so that we can follow suit
+AC_DEFUN([OCAML_WITH_NONEXECSTACK_NOTE],
+  [AC_REQUIRE([AC_PROG_FGREP])dnl
+  AC_CACHE_CHECK([if $CC generates a .note.GNU-stack section],
+    [ocaml_cv_prog_cc_nonexecstack_note],
+    [OCAML_CC_SAVE_VARIABLES
+
+    # We write the assembly into the .$ac_objext file as AC_COMPILE_IFELSE
+    # assumes an error if such a file doesn't exist after compiling
+    CFLAGS="$CFLAGS -S -o conftest.$ac_objext"
+
+    ocaml_cv_prog_cc_nonexecstack_note=no
+    AC_COMPILE_IFELSE([AC_LANG_SOURCE],
+      [AS_IF([$FGREP .note.GNU-stack conftest.$ac_objext >/dev/null],
+        [ocaml_cv_prog_cc_nonexecstack_note=yes])])
+    OCAML_CC_RESTORE_VARIABLES])
+
+  AS_IF([test "x$ocaml_cv_prog_cc_nonexecstack_note" = xyes],
+    [with_nonexecstack_note=true
+    AC_DEFINE([WITH_NONEXECSTACK_NOTE], [1])],
+    [with_nonexecstack_note=false])
+])
+
 AC_DEFUN([OCAML_CC_SUPPORTS_LABELS_AS_VALUES], [
   AC_CACHE_CHECK([whether $CC supports the labels as values extension],
     [ocaml_cv_prog_cc_labels_as_values],
diff --git a/configure b/configure
index 8e8f2351c6..1735c1178d 100755
--- a/configure
+++ b/configure
@@ -874,6 +874,7 @@ flexdll_dir
 bootstrapping_flexdll
 flexdll_source_dir
 zstd_libs
+with_nonexecstack_note
 native_ldflags
 cclibs
 oc_dll_ldflags
@@ -13538,6 +13539,66 @@ CC=$lt_save_CC
 CFLAGS="$saved_CFLAGS"
 target_os=$old_host_os
 
+  { printf "%s\n" "$as_me:${as_lineno-$LINENO}: checking if $CC generates a .note.GNU-stack section" >&5
+printf %s "checking if $CC generates a .note.GNU-stack section... " >&6; }
+if test ${ocaml_cv_prog_cc_nonexecstack_note+y}
+then :
+  printf %s "(cached) " >&6
+else $as_nop
+
+  saved_CC="$CC"
+  saved_CFLAGS="$CFLAGS"
+  saved_CPPFLAGS="$CPPFLAGS"
+  saved_LIBS="$LIBS"
+  saved_ac_ext="$ac_ext"
+  saved_ac_compile="$ac_compile"
+  # Move the content of confdefs.h to another file so it does not
+  # get included
+  mv confdefs.h confdefs.h.bak
+  touch confdefs.h
+
+
+    # We write the assembly into the .$ac_objext file as AC_COMPILE_IFELSE
+    # assumes an error if such a file doesn't exist after compiling
+    CFLAGS="$CFLAGS -S -o conftest.$ac_objext"
+
+    ocaml_cv_prog_cc_nonexecstack_note=no
+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"
+then :
+  if $FGREP .note.GNU-stack conftest.$ac_objext >/dev/null
+then :
+  ocaml_cv_prog_cc_nonexecstack_note=yes
+fi
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.beam conftest.$ac_ext
+
+  # Restore the content of confdefs.h
+  mv confdefs.h.bak confdefs.h
+  ac_compile="$saved_ac_compile"
+  ac_ext="$saved_ac_ext"
+  CPPFLAGS="$saved_CPPFLAGS"
+  CFLAGS="$saved_CFLAGS"
+  CC="$saved_CC"
+  LIBS="$saved_LIBS"
+
+fi
+{ printf "%s\n" "$as_me:${as_lineno-$LINENO}: result: $ocaml_cv_prog_cc_nonexecstack_note" >&5
+printf "%s\n" "$ocaml_cv_prog_cc_nonexecstack_note" >&6; }
+
+  if test "x$ocaml_cv_prog_cc_nonexecstack_note" = xyes
+then :
+  with_nonexecstack_note=true
+    printf "%s\n" "#define WITH_NONEXECSTACK_NOTE 1" >>confdefs.h
+
+else $as_nop
+  with_nonexecstack_note=false
+fi
+
+
 case $host in #(
   sparc-sun-solaris*) :
     DEP_CC="false" ;; #(
diff --git a/configure.ac b/configure.ac
index ea5fa86609..6cf1dbe353 100644
--- a/configure.ac
+++ b/configure.ac
@@ -177,6 +177,7 @@ AC_SUBST([oc_ldflags])
 AC_SUBST([oc_dll_ldflags])
 AC_SUBST([cclibs])
 AC_SUBST([native_ldflags])
+AC_SUBST([with_nonexecstack_note])
 AC_SUBST([zstd_libs])
 AC_SUBST([bytecode_cflags])
 AC_SUBST([bytecode_cppflags])
@@ -672,6 +673,8 @@ popdef([host_cpu])dnl
 popdef([host_alias])dnl
 popdef([host])dnl
 
+OCAML_WITH_NONEXECSTACK_NOTE
+
 AS_CASE([$host],
   [sparc-sun-solaris*],
     [DEP_CC="false"],
diff --git a/runtime/caml/m.h.in b/runtime/caml/m.h.in
index 3e9ef4b0b9..2fcc9e6e2b 100644
--- a/runtime/caml/m.h.in
+++ b/runtime/caml/m.h.in
@@ -81,3 +81,8 @@
 #undef SUPPORTS_TREE_VECTORIZE
 
 #undef USE_MMAP_MAP_STACK
+
+#undef WITH_NONEXECSTACK_NOTE
+
+/* Define WITH_NONEXECSTACK_NOTE when an explicit ".note.GNU-stack" section
+   is to be added to indicate the stack should not be executable */
-- 
2.47.2

