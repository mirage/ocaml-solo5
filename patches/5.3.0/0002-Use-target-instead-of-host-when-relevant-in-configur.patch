From 65a1ec131040e11b29564247b2b4535b8b4f0098 Mon Sep 17 00:00:00 2001
From: Samuel Hym <samuel@tarides.com>
Date: Tue, 9 Jul 2024 19:17:14 +0200
Subject: [PATCH 02/21] Use `target` instead of `host` when relevant in
 configuration

As the C toolchain being configured is generating code for `target`, use
`target` in every test that is done according to the toolchain.

Note that all these changes are transparent when `host` = `target`.
---
 aclocal.m4   |  12 ++---
 configure    | Bin 660523 -> 668791 bytes
 configure.ac | 142 +++++++++++++++++++++++++++------------------------
 3 files changed, 81 insertions(+), 73 deletions(-)

diff --git a/aclocal.m4 b/aclocal.m4
index 7353e09a96..242a0e6638 100644
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -369,27 +369,27 @@ AC_DEFUN([OCAML_TEST_WINPTHREADS_PTHREAD_H], [
   OCAML_CC_RESTORE_VARIABLES
 ])
 
-AC_DEFUN([OCAML_HOST_IS_EXECUTABLE], [
-  AC_MSG_CHECKING([whether host executables can be run in the build])
+AC_DEFUN([OCAML_TARGET_IS_EXECUTABLE], [
+  AC_MSG_CHECKING([whether target executables can be run in the build])
   old_cross_compiling="$cross_compiling"
   cross_compiling='no'
   AC_RUN_IFELSE(
     [AC_LANG_PROGRAM],
     [AC_MSG_RESULT([yes])
-    host_runnable=true],
+    target_runnable=true],
     [AC_MSG_RESULT([no])
-    host_runnable=false],
+    target_runnable=false],
     # autoconf displays a warning if this parameter is missing, but
     # cross-compilation mode was disabled above.
     [assert=false])
   cross_compiling="$old_cross_compiling"
 ])
 
-# This is AC_RUN_IFELSE but taking $host_runnable into account (i.e. if the
+# This is AC_RUN_IFELSE but taking $target_runnable into account (i.e. if the
 # program can be run, then it is run)
 AC_DEFUN([OCAML_RUN_IFELSE], [
   old_cross_compiling="$cross_compiling"
-  AS_IF([test "x$host_runnable" = 'xtrue'], [cross_compiling='no'])
+  AS_IF([test "x$target_runnable" = 'xtrue'], [cross_compiling='no'])
   AC_RUN_IFELSE([$1],[$2],[$3],[$4])
   cross_compiling="$old_cross_compiling"
 ])
diff --git a/configure b/configure
index e407887556f95b1a0cf36e89b4801af172231845..9ef0edf50277e5cfc17ad978deef969df774805a 100755
GIT binary patch
delta 1759
zcmaJ>YfMyE5YBy_b9M`RmjxDt02h|$x=R}fAP~?*TWhM77=odo+htjB+jX(*8mmRc
zv<Yd{)?nh$2Nvriq@;;Wn;dPCK>DC<5C!|I(o}2!AGOfhRD;#_+<SM6@S{IYGIze2
zIdkUw=JxgG-n)_8{ux)$3D3BYOjmYtQJiYp;Nh5LpgWIplesW2qYkL)=iZbvJ*_Rl
zpv%*;eTUEQZG}M~%fNhrBQQ0@*`h=4)@E<W<@WpBK_{FTmnxRH27lpu=!yZZpIZXF
z{iAdYx(2!1P|?mCm#<%wp=4((4Xs}H%f`l*fY<12QbOKfNOA5_GBO!lu7tLE14c!G
z^CNtgNm1M$mnY;}zovqrP*umrX?;=FSC<Iyy-$oAA`ux%TiZf-Mw8ng^kx`YDMeA!
zBVo+pWk|#yiBps&pRvgYuN*?l;Mxy7fgQ7aJdEDtWXdLS(a1OXIwpoWc6fFKc0@Wc
zEQyKwi0}L?ZRI3wQuO&r>6TTuq5QtIcEQY|AKjN8h2x-aUV1H@lJ`J5gW=P?I1PHb
zxOn(eK=I%ZQAw6kUar`3S-bW;rA+JEAE?Oj2NY+pDTjeZZ_w?5i#)nQbe@bxSmi<q
z@P&X%K@?FgOo_+>`$bd;UlJ4xS432#HXTC~Bs7kpyb{awuP7u6^ne+?5T#*idKxvP
zptUCLfv{ycnqENQ@Bp^JDLaaR{>{ij&p6OJO<~ED<fAyvlxg0R=&TLymSPLNxe5Ig
zna_9CXgp#cuR$O3+6{C=Ejnq}uAu+Cj><Oc=CfB(fCFnWw$kq>(2HVtV9rUjii10X
zWPpt>L}=S}bVREY1I)C8V;ZHv@O9Q-a0<2SjWZyMnx>Hyx!gK~N^rPf)o&;|T5sf~
z2WWq+b;(i~RbeV+Ff_`i%ZoO`-w5fqxT3|<r|mM{%`f&H{XIAF7;vxBcPyCgBVR8h
z!eA_p)wB*{v5frSxRget<8X}t(TyY#MgszZOIA!ob#tKKic^rTY}$~33pkirhSQS%
z6ZD#Oo1R`>t*%R0*B~U}LI@sWdWeX6H7%9#LsidEl!Wub&vz%`b4Y)Fb~=6|F6{oe
z2xk!824)|mTPkt4S!c$u5wDQ66gW2~CBdG0Y@-LOaekhL!|hunlm5CF_oeFJs-nPr
zg1z#5H+E2SH!cn{rXiOK5r&a{OqPc}z%`nJVssU<oYVNR8V|m~$@Eb#PK;UVbbXHR
z37V672k=VGw1F0XZ3xecDrBSVyMohX4?TrQgbQrh=+<xXjKQE2tM~$tT8mPsZybMB
z{C`SVOfc*<kd=#Fbi_bBA{3a2L#MgkMACJd-!+kw0?3Ud2C7N~5&o8mS*LkUCaDpc
z%PgdlgYh_$E~+%c@mP`scjHLGQdZgBy-zS!X=Xg>wCI!hI)@a5nViodm9p+-#8_x;
z38@P$9zu$`)h0UEM-G@(#0t?j*lHc_CmZwip|Z@=0u0Iol{W13`5PUX+gjM)+ZPD`
zqMSQCPS5V<UA}<B?zB6%`vT3o3JdIQ_QwGDWQbLMYL+|)`)0|>g_fY>DoTc`KS(N^
dog)gob&ACu*@H!BpCic~m*)t*JZGr0{R^cvTsQy#

delta 1111
zcmYjPT})h65YA<}Gk5R)+-0L!7Hw{KX<3n75)4pCN_nHEiEC18(_catkWFxRVV4%8
zNo`_E@Mjw!={)%J&<AYVn9$lXwl=73nrf6%X<}cfjSm%FtUuI5Q=;{pb18a~lYBGt
zotbau%%49-Po0Rqc2=t&bM<C&+%%?@YxL*{Skyd^LC%hA#VCD$Q5&KB11(Hn&FdCV
zUDamH;UjaJxFzDc#4Y6`bGmDdN>V85y_!PHi+ZtKA}W?Z`$Mpvce~&p#h`sUyrQVz
z=`exxlpns)1wU_+e*_w+#e$HhFTJTcnYClto@z>15Th9%G|_+s2^H!~+p(MoO<S;4
zN-yKb18^P5_Pc$&{1}wFXxBw;m>+~-msb+vJW>tqeoBpMKDyliKS*aAHSdQA*EGR1
zD+3rB6%Bi$Vie~#!d)fugJ!r8QK)Ax6rCQocfg#3YCGY0iHhDx!iP1Emhl2?+##XG
z^LHTaFcS;VU#gf_7NJemE2HzjLX_L?LQjc$DeZ5a9LIkHOEctH!geZ6hg+b6p122V
z_~+k2LzQRgFYx(LQY52w32X`>2FYWhpH3oriT;3q<1@S%P(B_5Tn@^geU5vp@Nbi_
z6@4^Vhn4CRYU$bm3{k^92=M21_!g`dIO@hq?r+4*BeFVqx8a+d-HPOh5oWZ^k>1{g
zjXFI)uUFH@{TSgdQy70zhAQZ7k2}P*<9KSVwBxk%rjUB{ve0(_494i(6t1UdKf)Jy
z<_vzKW>m-L&*Do8{-6HdFKF<qQ+NoSM1@(bq|j$rPLrKr((Ejjk5AsV=>1DB4<DPx
zF9M3kf)^~6(BjiKaI;H6x%V-S-^BYXAz>#pwM=AAV+Bv%!UeaQ`MV2vr_q@n)EFl`
ze7eCH4a&8$XxkQ}UXk9|VzgQ^vufDj#T~}({A#*&^l1h7`Sq`j!vV)Ru_WX~ZW)QV
zdc<N%@3_d`44y-S>C{k1W}xF>D*beQ*xqD^hgRSo(_TFrHrV-Yu?FEPxeXl$y3<{m
zftX`ta$$R&cvrQ5FxA(!8gncWH1oaPX}d*aOLpeEZHFcn%8o=$+iTavvdLKT<rhU&
Y%31F1bj5N{{MXxXA>igh!2BulFHiD)hyVZp

diff --git a/configure.ac b/configure.ac
index 18b0681d26..75429a8b34 100644
--- a/configure.ac
+++ b/configure.ac
@@ -318,7 +318,7 @@ AS_CASE([$host],
 
 # Systems that are known not to work, even in bytecode only.
 
-AS_CASE([$host],
+AS_CASE([$target],
   [i386-*-solaris*],
     [AC_MSG_ERROR([Building for 32 bits target is not supported. \
 If your host is 64 bits, you can try with './configure CC="gcc -m64"' \
@@ -326,7 +326,7 @@ If your host is 64 bits, you can try with './configure CC="gcc -m64"' \
 
 # MSVC special case
 
-AS_CASE([$host],
+AS_CASE([$target],
   [*-pc-windows],
     [AS_IF([test -z "$CC"], [CC=cl])
     ccomptype=msvc
@@ -619,10 +619,19 @@ AS_IF([test x"$enable_ocamldoc" = "xno"],
   optional_libraries="$optional_libraries ocamldoc/odoc_info"
   AC_CONFIG_FILES([ocamldoc/META])])
 
+# Are we building a cross-compiler
+
+AS_IF(
+  [test x"$host" = x"$target"],
+    [cross_compiler=false],
+    [cross_compiler=true])
+
 # Initialization of libtool
 # Allow the MSVC linker to be found even if ld isn't installed.
 # User-specified LD still takes precedence.
-AC_CHECK_TOOLS([LD],[ld link])
+AS_IF([$cross_compiler],
+  [AC_CHECK_TARGET_TOOLS([LD],[ld link],[false])],
+  [AC_CHECK_TOOLS([LD],[ld link])])
 # libtool will detect a build-to-host C toolchain but when building an OCaml
 # cross compiler we need the C toolchain to build the target runtime so we
 # temporarily define host* values as macros for target* values so that the
@@ -672,7 +681,7 @@ AS_CASE([$enable_dependency_generation],
       [compute_deps=true])],
     [compute_deps=false])])
 
-AS_CASE([$host],
+AS_CASE([$target],
   # In config/Makefile.mingw*, we had:
   # TARGET=i686-w64-mingw32 and x86_64-w64-mingw32
   # TOOLPREF=$(TARGET)-
@@ -684,7 +693,7 @@ AS_CASE([$host],
       mkexe_via_cc_extra_cmd=' && $(call MERGEMANIFESTEXE,$(1))'
       libext=lib
       AR=""
-      AS_IF([test "$host_cpu" = "x86_64" ],
+      AS_IF([test "$target_cpu" = "x86_64" ],
         [machine="-machine:AMD64 "],
         [machine=""])
       mklib="link -lib -nologo $machine /out:\$(1) \$(2)"
@@ -698,7 +707,7 @@ OCAML_CC_VENDOR
 
 ## In cross-compilation mode, can we run executables produced?
 # At the moment, it's required, but the fact is used in C99 function detection
-OCAML_HOST_IS_EXECUTABLE
+OCAML_TARGET_IS_EXECUTABLE
 
 # Determine how to call the C preprocessor directly.
 # Most of the time, calling the C preprocessor through the C compiler is
@@ -739,27 +748,30 @@ AS_CASE([$ocaml_cc_vendor],
 ocamlsrcdir=$(unset CDPATH; cd -- "$srcdir" && printf %sX "$PWD") || fail
 ocamlsrcdir=${ocamlsrcdir%X}
 
+AS_CASE([$host],
+  [*-*-mingw32*|*-pc-windows],
+    [ln='cp -pf'
+    ocamlsrcdir="$(LC_ALL=C.UTF-8 cygpath -w -- "$ocamlsrcdir")"],
+  [ln='ln -sf'])
+
 # Whether ar supports @FILE arguments
 
 AS_CASE([$lt_cv_ar_at_file],
   [no], [ar_supports_response_files=false],
   [ar_supports_response_files=true])
 
-# Libraries to build depending on the host
+# Libraries to build depending on the target
 
-AS_CASE([$host],
+AS_CASE([$target],
   [*-*-mingw32*|*-pc-windows],
     [unix_or_win32="win32"
-    ln='cp -pf'
     ocamltest_libunix="Some false"
-    ocamlsrcdir="$(LC_ALL=C.UTF-8 cygpath -w -- "$ocamlsrcdir")"
     ocamlyacc_wstr_module="yacc/wstr"],
   [unix_or_win32="unix"
-  ln='ln -sf'
   ocamltest_libunix="Some true"
   ocamlyacc_wstr_module=""])
 
-AS_CASE([$host],
+AS_CASE([$target],
   [*-*-cygwin*|*-*-mingw32*|*-pc-windows],
     [exeext=".exe"],
   [exeext=''])
@@ -804,7 +816,7 @@ AC_SYS_INTERPRETER
 shebangscripts=false
 launch_method='exe'
 AS_IF([test "x$interpval" = "xyes"],
-  [AS_CASE([$host],
+  [AS_CASE([$target],
     [*-cygwin],
       [# Cygwin supports shebangs, which we use for the compiler itself, but
       # partially for legacy, and partially so that executables can be easily
@@ -838,13 +850,6 @@ dnl nefarious single quotes which may appear in any of the strings.
   ocaml_bindir='$(echo "$ocaml_bindir" | sed -e "s/'/'\"'\"'/g")'
   target_bindir='$(echo "$target_bindir" | sed -e "s/'/'\"'\"'/g")'])
 
-# Are we building a cross-compiler
-
-AS_IF(
-  [test x"$host" = x"$target"],
-    [cross_compiler=false],
-    [cross_compiler=true])
-
 # Checks for programs
 
 ## Check for the C compiler: done by libtool
@@ -890,7 +895,7 @@ AS_CASE([$enable_warn_error,OCAML__DEVELOPMENT_VERSION],
   [yes,*|,true],
     [cc_warnings="$cc_warnings $warn_error_flag"])
 
-AS_CASE([$host],
+AS_CASE([$target],
   [*-*-mingw32*|*-pc-windows],
     [AS_CASE([$WINDOWS_UNICODE_MODE],
       [ansi],
@@ -952,14 +957,14 @@ AS_CASE([$ocaml_cc_vendor],
   [common_cflags="-O"])
 
 # Enable SSE2 on x86 mingw to avoid using 80-bit registers.
-AS_CASE([$host],
+AS_CASE([$target],
   [i686-*-mingw32*],
     [internal_cflags="$internal_cflags -mfpmath=sse -msse2"])
 
 # Use 64-bit file offset if possible
 # See also AC_SYS_LARGEFILE
 # Problem: flags are added to CC rather than CPPFLAGS
-AS_CASE([$host],
+AS_CASE([$target],
   [*-*-mingw32*|*-pc-windows], [],
   [common_cppflags="$common_cppflags -D_FILE_OFFSET_BITS=64"])
 
@@ -973,14 +978,14 @@ AS_CASE([$host],
 
 AS_IF([test x"$enable_shared" = "xno"],
   [supports_shared_libraries=false
-  AS_CASE([$host],
+  AS_CASE([$target],
     [*-pc-windows|*-w64-mingw32*],
     [AC_MSG_ERROR([Cannot build native Win32 with --disable-shared])])],
   [supports_shared_libraries=true])
 
 # Define flexlink chain and flags correctly for the different Windows ports
 flexlink_flags=''
-AS_CASE([$host],
+AS_CASE([$target],
   [i686-*-cygwin],
     [flexdll_chain='cygwin'
     flexlink_flags='-merge-manifest -stack 16777216'],
@@ -1070,14 +1075,14 @@ AS_IF([test x"$supports_shared_libraries" != 'xfalse'], [
   ])
 ])
 
-AS_CASE([$have_flexdll_h,$supports_shared_libraries,$host],
+AS_CASE([$have_flexdll_h,$supports_shared_libraries,$target],
  [no,true,*-*-cygwin*],
    [supports_shared_libraries=false
    AC_MSG_WARN([flexdll.h not found: shared library support disabled.])],
  [no,*,*-w64-mingw32*|no,*,*-pc-windows],
    [AC_MSG_ERROR([flexdll.h is required for native Win32])])
 
-AS_CASE([$flexdll_source_dir,$supports_shared_libraries,$flexlink,$host],
+AS_CASE([$flexdll_source_dir,$supports_shared_libraries,$flexlink,$target],
   [,true,,*-*-cygwin*],
     [supports_shared_libraries=false
     AC_MSG_WARN([flexlink not found: shared library support disabled.])],
@@ -1086,7 +1091,7 @@ AS_CASE([$flexdll_source_dir,$supports_shared_libraries,$flexlink,$host],
 
 mkexe_cmd_exp="$CC"
 
-AS_CASE([$ocaml_cc_vendor,$host],
+AS_CASE([$ocaml_cc_vendor,$target],
   [*,x86_64-*-darwin*],
     [oc_ldflags='-Wl,-no_compact_unwind';
     AC_DEFINE([HAS_ARCH_CODE32], [1])],
@@ -1103,7 +1108,7 @@ AS_CASE([$ocaml_cc_vendor,$host],
     )
     ostype="Cygwin"],
   [*,*-*-mingw32*],
-    [AS_CASE([$host],
+    [AS_CASE([$target],
       [i686-*-*], [oc_dll_ldflags="-static-libgcc"])
     ostype="Win32"
     toolchain="mingw"
@@ -1198,7 +1203,7 @@ AC_CHECK_HEADER([sys/select.h], [AC_DEFINE([HAS_SYS_SELECT_H], [1])], [],
 
 AC_CHECK_HEADER([sys/mman.h], [AC_DEFINE([HAS_SYS_MMAN_H], [1])])
 
-AS_CASE([$host],
+AS_CASE([$target],
   [*-*-linux*],
     [AC_CHECK_HEADER([linux/futex.h], [AC_DEFINE([HAS_LINUX_FUTEX_H])])])
 
@@ -1295,7 +1300,7 @@ AS_IF([! $cc_supports_atomic],
 # Full support for thread local storage
 # macOS and MinGW-w64 have problems with thread local storage accessed from DLLs
 
-AS_CASE([$host],
+AS_CASE([$target],
   [*-apple-darwin*|*-mingw32*|*-pc-windows], [],
   [AC_DEFINE([HAS_FULL_THREAD_VARIABLES], [1])]
 )
@@ -1311,7 +1316,7 @@ natdynlinkopts=""
 
 AS_IF([test x"$enable_shared" != "xno"],
   [mkdll=''
-  AS_CASE([$host],
+  AS_CASE([$target],
     [x86_64-apple-darwin*],
       [mkdll_flags=\
 '-shared -undefined dynamic_lookup -Wl,-no_compact_unwind -Wl,-w'
@@ -1339,7 +1344,7 @@ AS_IF([test x"$enable_shared" != "xno"],
     [[*-*-linux*|*-*-freebsd[3-9]*|*-*-freebsd[1-9][0-9]*\
     |*-*-openbsd*|*-*-netbsd*|*-*-dragonfly*|*-*-gnu*|*-*-haiku*]],
       [sharedlib_cflags="-fPIC"
-       AS_CASE([$ocaml_cc_vendor,$host],
+       AS_CASE([$ocaml_cc_vendor,$target],
          [gcc-*,powerpc-*-linux*],
            [mkdll_flags='-shared -mbss-plt'],
          [[*,i[3456]86-*]],
@@ -1347,7 +1352,7 @@ AS_IF([test x"$enable_shared" != "xno"],
            # See https://github.com/ocaml/ocaml/issues/9800
            [mkdll_flags='-shared -Wl,-z,notext'],
          [mkdll_flags='-shared'])
-       AS_CASE([$host],
+       AS_CASE([$target],
          [[*-*-openbsd7.[3-9]|*-*-openbsd[89].*]],
            [mkdll_flags="${mkdll_flags} -Wl,--no-execute-only"])
       oc_ldflags="$oc_ldflags -Wl,-E"
@@ -1367,14 +1372,14 @@ AS_IF([test -z "$mkmaindll"],
 # Make sure code sections in OCaml-generated executables are readable
 # (required for marshaling of function closures)
 
-AS_CASE([$host],
+AS_CASE([$target],
   [[*-*-openbsd7.[3-9]|*-*-openbsd[89].*]],
     [oc_ldflags="$oc_ldflags -Wl,--no-execute-only"
      natdynlinkopts="$natdynlinkopts -Wl,--no-execute-only"])
 
 # Disable control flow integrity
 
-AS_CASE([$host],
+AS_CASE([$target],
   [[*-*-openbsd7.[4-9]|*-*-openbsd[89].*]],
     [oc_ldflags="$oc_ldflags -Wl,-z,nobtcfi"
      natdynlinkopts="$natdynlinkopts -Wl,-z,nobtcfi"])
@@ -1385,7 +1390,7 @@ AS_CASE([$host],
 natdynlink=false
 
 AS_IF([test x"$supports_shared_libraries" = 'xtrue'],
-  [AS_CASE(["$host"],
+  [AS_CASE(["$target"],
     [*-*-cygwin*], [natdynlink=true],
     [*-*-mingw32*], [natdynlink=true],
     [*-pc-windows], [natdynlink=true],
@@ -1427,7 +1432,7 @@ AS_CASE([$enable_native_toplevel,$natdynlink],
   [install_ocamlnat=false])
 
 # Try to work around the Skylake/Kaby Lake processor bug.
-AS_CASE(["$ocaml_cc_vendor,$host"],
+AS_CASE(["$ocaml_cc_vendor,$target"],
   [*gcc*,x86_64-*|*gcc*,i686-*],
     [AX_CHECK_COMPILE_FLAG([-fno-tree-vrp],
       [internal_cflags="$internal_cflags -fno-tree-vrp"], [],
@@ -1449,7 +1454,7 @@ system=unknown
 # preserving $arch = 'none' <=> $system = 'unknown'
 has_native_backend=no
 native_ldflags=""
-AS_CASE([$host],
+AS_CASE([$target],
   [[i[3456]86-*-linux*]],
     [arch=i386; system=linux],
   [[i[3456]86-*-freebsd*]],
@@ -1587,9 +1592,11 @@ AS_IF([$natdynlink],
 
 AC_DEFINE_UNQUOTED([OCAML_OS_TYPE], ["$ostype"])
 
-AC_CHECK_TOOL([DIRECT_LD],[ld])
+AS_IF([$cross_compiler],
+  [AC_CHECK_TARGET_TOOL([DIRECT_LD],[ld],[false])],
+  [AC_CHECK_TOOL([DIRECT_LD],[ld])])
 AS_IF([test -z "$PARTIALLD"],
-  [AS_CASE(["$host,$ocaml_cc_vendor"],
+  [AS_CASE(["$target,$ocaml_cc_vendor"],
     [x86_64-*-darwin*,gcc-*], [PACKLD_FLAGS=' -arch x86_64'],
     [powerpc64le*-*-linux*,gcc-*], [PACKLD_FLAGS=' -m elf64lppc'],
     [powerpc*-*-linux*,gcc-*],
@@ -1624,7 +1631,7 @@ AS_CASE([$arch],
   [amd64|arm64|s390x|none],
     # ocamlopt generates PIC code or doesn't generate code at all
     [],
-  [AS_CASE([$host],
+  [AS_CASE([$target],
     # expected to match "*-linux-musl" as well as "*-linux-musleabi*"
     [*-linux-musl*],
       # Alpine and other musl-based Linux distributions
@@ -1742,7 +1749,7 @@ AC_CHECK_FUNC([issetugid], [AC_DEFINE([HAS_ISSETUGID], [1])])
 ## On Unix platforms, we check for the appropriate POSIX feature-test macros.
 ## On MacOS clock_gettime's CLOCK_MONOTONIC flag is not actually monotonic.
 
-AS_CASE([$host],
+AS_CASE([$target],
   [*-*-windows],
     [has_monotonic_clock=true],
   [*-apple-darwin*], [
@@ -1774,7 +1781,7 @@ AS_CASE([$host],
 # clock source is missing.
 AS_IF([test "x$enable_instrumented_runtime" != "xno" ],
   [
-    AS_CASE([$host],
+    AS_CASE([$target],
     [sparc-sun-solaris*],
       [instrumented_runtime=false],
     [*-*-windows],
@@ -1965,7 +1972,7 @@ AS_IF([$tsan],
 
 sockets=true
 
-AS_CASE([$host],
+AS_CASE([$target],
   [*-*-mingw32*],
     [cclibs="$cclibs -lws2_32"
     AC_SEARCH_LIBS([socket], [ws2_32])
@@ -1993,7 +2000,7 @@ AS_IF([$sockets], [AC_DEFINE([HAS_SOCKETS], [1])])
 
 ## socklen_t
 
-AS_CASE([$host],
+AS_CASE([$target],
   [*-*-mingw32*|*-pc-windows],
     [AC_CHECK_TYPE([socklen_t], [AC_DEFINE([HAS_SOCKLEN_T], [1])], [],
       [#include <ws2tcpip.h>])],
@@ -2004,7 +2011,7 @@ AC_CHECK_FUNC([inet_aton], [AC_DEFINE([HAS_INET_ATON], [1])])
 
 ## Unix domain sockets support on Windows
 
-AS_CASE([$host],
+AS_CASE([$target],
   [*-*-mingw32*|*-pc-windows],
     [AC_CHECK_HEADERS([afunix.h], [AC_DEFINE([HAS_AFUNIX_H], [1])], [],
       [#include <winsock2.h>])])
@@ -2013,7 +2020,7 @@ AS_CASE([$host],
 
 ipv6=true
 
-AS_CASE([$host],
+AS_CASE([$target],
   [*-*-mingw32*|*-pc-windows],
     [AC_CHECK_TYPE(
       [struct sockaddr_in6], [], [ipv6=false], [#include <ws2tcpip.h>])],
@@ -2047,7 +2054,7 @@ AC_CHECK_FUNC([system], [AC_DEFINE([HAS_SYSTEM], [1])])
 ## Note: this was defined in config/s-nt.h but the autoconf macros do not
 # seem to detect it properly on Windows so we hardcode the definition
 # of HAS_UTIME on Windows but this will probably need to be clarified
-AS_CASE([$host],
+AS_CASE([$target],
   [*-*-mingw32*|*-pc-windows], [AC_DEFINE([HAS_UTIME], [1])],
   [AC_CHECK_HEADER([sys/types.h],
     [AC_CHECK_HEADER([utime.h],
@@ -2123,7 +2130,7 @@ AC_CHECK_FUNC([setitimer],
 ## gethostname
 # Note: detection fails on Windows so hardcoding the result
 # (should be debugged later)
-AS_CASE([$host],
+AS_CASE([$target],
   [*-*-mingw32*|*-pc-windows], [AC_DEFINE([HAS_GETHOSTNAME], [1])],
   [AC_CHECK_FUNC([gethostname], [AC_DEFINE([HAS_GETHOSTNAME], [1])])])
 
@@ -2147,7 +2154,7 @@ AC_CHECK_FUNC([mktime], [AC_DEFINE([HAS_MKTIME], [1])])
 
 ## setsid
 
-AS_CASE([$host],
+AS_CASE([$target],
   [*-cygwin|*-*-mingw32*|*-pc-windows], [],
   [AC_CHECK_FUNC([setsid], [AC_DEFINE([HAS_SETSID], [1])])])
 
@@ -2163,7 +2170,7 @@ AC_CHECK_FUNC([setenv],
 ## newlocale() and <locale.h>
 # Note: the detection fails on msvc so we hardcode the result
 # (should be debugged later)
-AS_CASE([$host],
+AS_CASE([$target],
   [*-pc-windows], [AC_DEFINE([HAS_LOCALE_H], [1])],
   [AC_CHECK_HEADER([locale.h],
     [AC_CHECK_FUNC([newlocale],
@@ -2178,13 +2185,13 @@ AC_CHECK_HEADER([xlocale.h],
 ## strtod_l
 # Note: not detected on MSVC so hardcoding the result
 # (should be debugged later)
-AS_CASE([$host],
+AS_CASE([$target],
   [*-pc-windows], [AC_DEFINE([HAS_STRTOD_L], [1])],
   [AC_CHECK_FUNC([strtod_l], [AC_DEFINE([HAS_STRTOD_L], [1])])])
 
 ## shared library support
 AS_IF([$supports_shared_libraries],
-  [AS_CASE([$host],
+  [AS_CASE([$target],
     [*-*-mingw32*|*-pc-windows|*-*-cygwin*],
       [DLLIBS=""],
     [AC_CHECK_FUNC([dlopen],
@@ -2210,7 +2217,7 @@ AC_CHECK_HEADER([sys/mman.h],
 AC_CHECK_FUNC([pwrite], [AC_DEFINE([HAS_PWRITE], [1])])
 
 ## -fdebug-prefix-map support by the C compiler
-AS_CASE([$ocaml_cc_vendor,$host],
+AS_CASE([$ocaml_cc_vendor,$target],
   [*,*-*-mingw32*], [cc_has_debug_prefix_map=false],
   [*,*-pc-windows], [cc_has_debug_prefix_map=false],
   [xlc*,powerpc-ibm-aix*], [cc_has_debug_prefix_map=false],
@@ -2289,7 +2296,9 @@ AC_CHECK_HEADER([spawn.h],
   [AC_CHECK_FUNC([posix_spawn],
     [AC_CHECK_FUNC([posix_spawnp], [AC_DEFINE([HAS_POSIX_SPAWN], [1])])])])
 
-AC_PATH_TOOL([PKG_CONFIG], [pkg-config], [false])
+AS_IF([$cross_compiler],
+  [AC_PATH_TARGET_TOOL([PKG_CONFIG], [pkg-config], [false])],
+  [AC_PATH_TOOL([PKG_CONFIG], [pkg-config], [false])])
 
 ## ZSTD compression library
 
@@ -2320,9 +2329,9 @@ AS_IF([test x"$with_zstd" != "xno"],
 # library available, but not have the DLL in PATH. This then causes the build to
 # fail as soon as ocamlrun is first executed. This check avoids automatically
 # enabling zstd when the resulting executable doesn't actually work.
-AS_CASE([$host],
+AS_CASE([$target],
   [*-w64-mingw32*|*-pc-windows],
-    [check_zstd_runs=$host_runnable],
+    [check_zstd_runs=$target_runnable],
   [check_zstd_runs=false])
 
 AS_IF([test x"$zstd_status" = "xok"],[
@@ -2390,7 +2399,7 @@ AS_CASE([$enable_debug_runtime],
 
 ## Determine how to link with the POSIX threads library
 
-AS_CASE([$host],
+AS_CASE([$target],
   [*-*-mingw32*],
     [link_gcc_eh=''
      AC_CHECK_LIB([gcc_eh], [printf], [link_gcc_eh="-lgcc_eh"])
@@ -2458,7 +2467,7 @@ AS_CASE([$enable_systhreads,$enable_unix_lib],
 as_has_debug_prefix_map=false
 asm_cfi_supported=false
 AS_IF([$native_compiler],
-  [AS_CASE([$host],
+  [AS_CASE([$target],
     [*-*-mingw32*|*-pc-windows], [],
     [OCAML_AS_HAS_DEBUG_PREFIX_MAP
     OCAML_AS_HAS_CFI_DIRECTIVES])])
@@ -2466,7 +2475,7 @@ AS_IF([$native_compiler],
 ## Frame pointers
 
 AS_IF([test x"$enable_frame_pointers" = "xyes"],
-  [AS_CASE([$host],
+  [AS_CASE([$target],
     [x86_64-*-linux*|x86_64-*-darwin*],
      [AS_CASE([$ocaml_cc_vendor],
         [clang-*|gcc-*],
@@ -2647,7 +2656,7 @@ native_cflags="$native_cflags $PTHREAD_CFLAGS $COMPILER_NATIVE_CFLAGS"
 bytecode_cppflags="$common_cppflags $COMPILER_BYTECODE_CPPFLAGS"
 native_cppflags="$common_cppflags $COMPILER_NATIVE_CPPFLAGS"
 
-AS_CASE([$host],
+AS_CASE([$target],
   [*-*-mingw32*],
     [cclibs="$cclibs -lole32 -luuid -lversion -lshlwapi -lsynchronization"],
   [*-pc-windows],
@@ -2671,15 +2680,14 @@ AS_IF([test x"$prefix" = "xNONE"],
     [x86_64-w64-mingw32*], [prefix='C:/ocamlmgw64'],
     [i686-pc-windows], [prefix='C:/ocamlms'],
     [x86_64-pc-windows], [prefix='C:/ocamlms64'])],
-  [AS_IF([test x"$unix_or_win32" = "xwin32" \
-          && test "$host_vendor-$host_os" != "$build_vendor-$build_os" ],
-    [AS_CASE([$build],
-      [*-pc-cygwin], [prefix="$(LC_ALL=C.UTF-8 cygpath -m "$prefix")"])])])
+  [AS_CASE([$build,$host],
+    [*-pc-cygwin,*-*-mingw32*|*-pc-cygwin,*-pc-windows],
+      [prefix="$(LC_ALL=C.UTF-8 cygpath -m "$prefix")"])])
 
 # Define a few macros that were defined in config/m-nt.h
 # but whose value is not guessed properly by configure
 # (all this should be understood and fixed)
-AS_CASE([$host],
+AS_CASE([$target],
   [*-*-mingw32*],
     [AC_DEFINE([HAS_BROKEN_PRINTF], [1])
     AC_DEFINE([HAS_IPV6], [1])
-- 
2.47.2

