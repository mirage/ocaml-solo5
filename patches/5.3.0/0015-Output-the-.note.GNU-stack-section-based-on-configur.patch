From c16fb4888f0da0e28df22df28e238d4b3048db3c Mon Sep 17 00:00:00 2001
From: Samuel Hym <samuel@tarides.com>
Date: Mon, 13 Jan 2025 12:25:58 +0100
Subject: [PATCH 15/21] Output the `.note.GNU-stack` section based on
 `configure`

Uniformly rely on the detection during `configure` of whether the
`.note.GNU-stack` section is generated by the C compiler to decide
whether to output it
Define a macro in `asm.h` and a function in `Emitaux` to output the
section when it should be

Before that patch, the `.note.GNU-stack` section was:
- on x86_64:
  - generated by `emit.mlp` only on Linux and FreeBSD
  - present in `amd64.S` only on Linux and FreeBSD
- on ARM:
  - generated by `emit.mlp` only on Linux
  - present in `arm64.S` except on macOS
- on RISC-V:
  - never generated by `emit.mlp`
  - always present in `riscv.S`
- on POWER:
  - always generated by `emit.mlp`
  - always present in `power.S`
- on S/390:
  - always generated by `emit.mlp`
  - always present in `s390x.S`
---
 asmcomp/amd64/emit.mlp         | 2 +-
 asmcomp/arm64/emit.mlp         | 7 +------
 asmcomp/emitaux.ml             | 5 +++++
 asmcomp/emitaux.mli            | 3 +++
 asmcomp/power/emit.mlp         | 2 +-
 asmcomp/riscv/emit.mlp         | 3 ++-
 asmcomp/s390x/emit.mlp         | 3 +--
 runtime/amd64.S                | 5 +----
 runtime/arm64.S                | 5 +----
 runtime/caml/asm.h             | 8 ++++++++
 runtime/power.S                | 3 +--
 runtime/riscv.S                | 3 +--
 runtime/s390x.S                | 3 +--
 testsuite/tools/asmgen_arm.S   | 6 ++++--
 testsuite/tools/asmgen_arm64.S | 8 ++++----
 testsuite/tools/asmgen_power.S | 6 ++++--
 testsuite/tools/asmgen_s390x.S | 6 ++++--
 17 files changed, 43 insertions(+), 35 deletions(-)

diff --git a/asmcomp/amd64/emit.mlp b/asmcomp/amd64/emit.mlp
index 23f5b4525c..d35ac2d710 100644
--- a/asmcomp/amd64/emit.mlp
+++ b/asmcomp/amd64/emit.mlp
@@ -1083,7 +1083,7 @@ let end_assembly() =
     D.size frametable (ConstSub (ConstThis, ConstLabel frametable))
   end;
 
-  if system = S_linux || system = S_freebsd then
+  if Config.with_nonexecstack_note then
     (* Mark stack as non-executable, PR#4564 *)
     D.section [".note.GNU-stack"] (Some "") [ "%progbits" ];
 
diff --git a/asmcomp/arm64/emit.mlp b/asmcomp/arm64/emit.mlp
index f59a5aed78..ba36dbdd84 100644
--- a/asmcomp/arm64/emit.mlp
+++ b/asmcomp/arm64/emit.mlp
@@ -1209,9 +1209,4 @@ let end_assembly () =
       efa_string = (fun s -> emit_string_directive "	.asciz	" s) };
   emit_symbol_type emit_symbol lbl "object";
   emit_symbol_size lbl;
-  begin match Config.system with
-  | "linux" ->
-      (* Mark stack as non-executable *)
-      `	.section	.note.GNU-stack,\"\",%progbits\n`
-  | _ -> ()
-  end
+  emit_nonexecstack_note ()
diff --git a/asmcomp/emitaux.ml b/asmcomp/emitaux.ml
index 306e249223..c115eacbbe 100644
--- a/asmcomp/emitaux.ml
+++ b/asmcomp/emitaux.ml
@@ -111,6 +111,11 @@ let emit_float64_split_directive directive x =
 let emit_float32_directive directive x =
   emit_printf "\t%s\t0x%lx\n" directive x
 
+let emit_nonexecstack_note () =
+  if Config.with_nonexecstack_note then begin
+    emit_string "\t.section .note.GNU-stack,\"\",%progbits\n"
+  end
+
 (* Record live pointers at call points *)
 
 type frame_debuginfo =
diff --git a/asmcomp/emitaux.mli b/asmcomp/emitaux.mli
index d174fa92d4..a474c9f902 100644
--- a/asmcomp/emitaux.mli
+++ b/asmcomp/emitaux.mli
@@ -30,6 +30,9 @@ val emit_float64_directive: string -> int64 -> unit
 val emit_float64_split_directive: string -> int64 -> unit
 val emit_float32_directive: string -> int32 -> unit
 
+val emit_nonexecstack_note : unit -> unit
+(** Emit a [.note.GNU-stack] section when it is supported by the linker *)
+
 val reset : unit -> unit
 val reset_debug_info: unit -> unit
 val emit_debug_info: Debuginfo.t -> unit
diff --git a/asmcomp/power/emit.mlp b/asmcomp/power/emit.mlp
index f9303ea65d..7d586e5032 100644
--- a/asmcomp/power/emit.mlp
+++ b/asmcomp/power/emit.mlp
@@ -1170,4 +1170,4 @@ let end_assembly() =
   emit_string toc_space;
   emit_toctable();
   Hashtbl.clear tocref_entries;
-  `	.section .note.GNU-stack,\"\",%progbits\n`
+  emit_nonexecstack_note ()
diff --git a/asmcomp/riscv/emit.mlp b/asmcomp/riscv/emit.mlp
index 964dc4db5c..b27833d180 100644
--- a/asmcomp/riscv/emit.mlp
+++ b/asmcomp/riscv/emit.mlp
@@ -759,4 +759,5 @@ let end_assembly() =
                            `	.long	({emit_label lbl} - .) + {emit_int32 ofs}\n`);
       efa_def_label = (fun l -> `{emit_label l}:\n`);
       efa_string = (fun s -> emit_bytes_directive "	.byte	" (s ^ "\000"))
-     }
+     };
+  emit_nonexecstack_note ()
diff --git a/asmcomp/s390x/emit.mlp b/asmcomp/s390x/emit.mlp
index 9959ff1531..787d590d6d 100644
--- a/asmcomp/s390x/emit.mlp
+++ b/asmcomp/s390x/emit.mlp
@@ -865,5 +865,4 @@ let end_assembly() =
       efa_def_label = (fun l -> `{emit_label l}:\n`);
       efa_string = (fun s -> emit_bytes_directive "	.byte	" (s ^ "\000"))
      };
-   (* Mark stack as non-executable *)
-   `	.section .note.GNU-stack,\"\",%progbits\n`
+  emit_nonexecstack_note ()
diff --git a/runtime/amd64.S b/runtime/amd64.S
index 32364d7042..3f96122476 100644
--- a/runtime/amd64.S
+++ b/runtime/amd64.S
@@ -1347,7 +1347,4 @@ G(caml_negf_mask):
 G(caml_absf_mask):
         .quad   0x7FFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF
 
-#if defined(SYS_linux) || defined(SYS_freebsd)
-    /* Mark stack as non-executable, PR#4564 */
-        .section .note.GNU-stack,"",%progbits
-#endif
+        NONEXECSTACK_NOTE
diff --git a/runtime/arm64.S b/runtime/arm64.S
index 2153558d30..2a4e50241a 100644
--- a/runtime/arm64.S
+++ b/runtime/arm64.S
@@ -1234,7 +1234,4 @@ OBJECT(caml_system.frametable)
         .align 3
         END_OBJECT(caml_system.frametable)
 
-#if !defined(SYS_macosx)
-/* Mark stack as non-executable */
-        .section .note.GNU-stack,"",%progbits
-#endif
+        NONEXECSTACK_NOTE
diff --git a/runtime/caml/asm.h b/runtime/caml/asm.h
index b3c9b2b230..a889694446 100644
--- a/runtime/caml/asm.h
+++ b/runtime/caml/asm.h
@@ -45,6 +45,14 @@
 #define CFI_STARTPROC
 #endif
 
+/* Non-executable stack note */
+
+#ifdef WITH_NONEXECSTACK_NOTE
+#define NONEXECSTACK_NOTE       .section .note.GNU-stack,"",%progbits
+#else
+#define NONEXECSTACK_NOTE
+#endif
+
 /******************************************************************************/
 /* DWARF */
 /******************************************************************************/
diff --git a/runtime/power.S b/runtime/power.S
index e3e4bbe4af..5cb0de0493 100644
--- a/runtime/power.S
+++ b/runtime/power.S
@@ -1212,5 +1212,4 @@ TOCENTRY(caml_array_bound_error_asm)
 TOCENTRYLABEL(fiber_exn_handler)
 TOCENTRYLABEL(trap_handler)
 
-/* Mark stack as non-executable */
-        .section .note.GNU-stack,"",%progbits
+        NONEXECSTACK_NOTE
diff --git a/runtime/riscv.S b/runtime/riscv.S
index 03bb93e020..ac3131dc51 100644
--- a/runtime/riscv.S
+++ b/runtime/riscv.S
@@ -1257,5 +1257,4 @@ OBJECT(caml_system.frametable)
         .align  3
 END_OBJECT(caml_system.frametable)
 
-/* Mark stack as non-executable */
-        .section .note.GNU-stack,"",%progbits
+        NONEXECSTACK_NOTE
diff --git a/runtime/s390x.S b/runtime/s390x.S
index 917c0592dc..70a44575fb 100644
--- a/runtime/s390x.S
+++ b/runtime/s390x.S
@@ -1212,5 +1212,4 @@ caml_system.frametable:
         .short  0               /* no roots here */
         .align  8
 
-/* Mark stack as non-executable */
-        .section .note.GNU-stack,"",%progbits
+        NONEXECSTACK_NOTE
diff --git a/testsuite/tools/asmgen_arm.S b/testsuite/tools/asmgen_arm.S
index da6d9ee74f..49d734c513 100644
--- a/testsuite/tools/asmgen_arm.S
+++ b/testsuite/tools/asmgen_arm.S
@@ -13,6 +13,9 @@
 /*                                                                        */
 /**************************************************************************/
 
+#include "caml/m.h"
+#include "caml/asm.h"
+
         .text
 
         .global call_gen_code
@@ -38,5 +41,4 @@ caml_c_call:
     @ function to call is in r10
         bx      r10
 
-/* Mark stack as non-executable */
-        .section .note.GNU-stack,"",%progbits
+        NONEXECSTACK_NOTE
diff --git a/testsuite/tools/asmgen_arm64.S b/testsuite/tools/asmgen_arm64.S
index 6a06f8d7e2..d43144cf59 100644
--- a/testsuite/tools/asmgen_arm64.S
+++ b/testsuite/tools/asmgen_arm64.S
@@ -13,6 +13,9 @@
 /*                                                                        */
 /**************************************************************************/
 
+#include "caml/m.h"
+#include "caml/asm.h"
+
 #if defined(SYS_macosx)
 #define G(sym) _##sym
 #else
@@ -60,7 +63,4 @@ G(call_gen_code):
 G(caml_c_call):
         br      x15
 
-#if !defined(SYS_macosx)
-/* Mark stack as non-executable */
-        .section .note.GNU-stack,"",%progbits
-#endif
+        NONEXECSTACK_NOTE
diff --git a/testsuite/tools/asmgen_power.S b/testsuite/tools/asmgen_power.S
index b332348417..754afefa6b 100644
--- a/testsuite/tools/asmgen_power.S
+++ b/testsuite/tools/asmgen_power.S
@@ -10,6 +10,9 @@
 /*                                                                   */
 /*********************************************************************/
 
+#include "caml/m.h"
+#include "caml/asm.h"
+
 #define RESERVED_STACK 32
 #define LR_SAVE_AREA 16
 
@@ -131,5 +134,4 @@ FUNCTION(caml_c_call)
         mr      12, 28
         bctr
 
-/* Mark stack as non-executable */
-        .section .note.GNU-stack,"",%progbits
+        NONEXECSTACK_NOTE
diff --git a/testsuite/tools/asmgen_s390x.S b/testsuite/tools/asmgen_s390x.S
index 99eeca2704..14c014c76e 100644
--- a/testsuite/tools/asmgen_s390x.S
+++ b/testsuite/tools/asmgen_s390x.S
@@ -1,3 +1,6 @@
+#include "caml/m.h"
+#include "caml/asm.h"
+
 #define ALIGN 8
 
 #define CALL_GEN_CODE call_gen_code
@@ -63,5 +66,4 @@ CAML_ABSF_MASK:
 
         .comm   young_limit, 8
 
-/* Mark stack as non-executable */
-        .section .note.GNU-stack,"",%progbits
+        NONEXECSTACK_NOTE
-- 
2.47.2

