From a7c806941bb8fb5676e11a34f1e2a1e1b481d8c2 Mon Sep 17 00:00:00 2001
From: Samuel Hym <samuel@tarides.com>
Date: Fri, 23 Feb 2024 16:56:07 +0100
Subject: [PATCH 08/21] Add a Makefile.cross with rules to build a cross
 compiler

Add a new `Makefile.cross` that gets enabled when building a cross
compiler, aka when host is different from target
Define two new (phony) targets:
- crossopt, to build the cross compilers to the native target (and what
  is required for such cross compilers to work)
- installcross, to install the cross compilers
---
 Makefile       |  5 ++++
 Makefile.cross | 74 ++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 79 insertions(+)
 create mode 100644 Makefile.cross

diff --git a/Makefile b/Makefile
index 1ec0bd20b2..818d23e4ee 100644
--- a/Makefile
+++ b/Makefile
@@ -2962,6 +2962,11 @@ endif
 
 include .depend
 
+# Include the cross-compiler recipes only when relevant
+ifneq "$(HOST)" "$(TARGET)"
+include Makefile.cross
+endif
+
 Makefile.config Makefile.build_config: config.status
 config.status:
 	@echo "Please refer to the installation instructions:"
diff --git a/Makefile.cross b/Makefile.cross
new file mode 100644
index 0000000000..c30d2e2b4f
--- /dev/null
+++ b/Makefile.cross
@@ -0,0 +1,74 @@
+#**************************************************************************
+#*                                                                        *
+#*                                 OCaml                                  *
+#*                                                                        *
+#*                          Samuel Hym, Tarides                           *
+#*                                                                        *
+#*   Copyright 2024 Tarides                                               *
+#*                                                                        *
+#*   All rights reserved.  This file is distributed under the terms of    *
+#*   the GNU Lesser General Public License version 2.1, with the          *
+#*   special exception on linking described in the file LICENSE.          *
+#*                                                                        *
+#**************************************************************************
+
+# Recipes to build a cross compiler (_not_ cross-compiling the compiler), aka
+# generating code that will run on `target`, assuming that a non-cross OCaml
+# compiler (so targetting our build machine) of the same version is available in
+# $PATH
+
+# As the cross compiler will be linked with the _build_ version of
+# libcomprmarsh, we cannot rely on the detection of zstd done during `configure`
+# (as it would have detected the _target_ version). So we recover the flags to
+# link with zstd of the non-cross compiler.
+# Note that the shell call is a variable that is used only once, so it doesn't
+# have to be lazier.
+HOST_ZSTD_LIBS=$(shell grep ^ZSTD_LIBS= "$$(ocamlopt -where)/Makefile.config")
+
+CROSS_OVERRIDES=OCAMLRUN=ocamlrun NEW_OCAMLRUN=ocamlrun \
+  BOOT_OCAMLLEX=ocamllex OCAMLYACC=ocamlyacc
+CROSS_COMPILER_OVERRIDES=$(CROSS_OVERRIDES) CAMLC=ocamlc CAMLOPT=ocamlopt \
+  BEST_OCAMLC=ocamlc BEST_OCAMLOPT=ocamlopt BEST_OCAMLLEX=ocamllex
+CROSS_COMPILERLIBS_OVERRIDES=$(CROSS_OVERRIDES) CAMLC=ocamlc \
+  CAMLOPT="$(ROOTDIR)/ocamlopt.opt$(EXE) $(STDLIBFLAGS)"
+
+# The compiler libs that should be rebuilt for target (they are first built for
+# host as part of the .opt compilers)
+CROSSCOMPILERLIBS := $(addprefix compilerlibs/,$(addsuffix .cmxa,\
+    ocamlcommon ocamlmiddleend ocamlbytecomp ocamloptcomp ocamltoplevel))
+
+.PHONY: crossopt
+crossopt: runtime-all
+	$(MAKE) ocamlc $(TOOLS_BYTECODE_TARGETS) expunge$(EXE) \
+	  $(CROSS_COMPILER_OVERRIDES)
+	$(MAKE) library $(CROSS_OVERRIDES)
+	$(MAKE) ocamlyacc $(CROSS_OVERRIDES)
+	$(MAKE) ocamllex $(CROSS_COMPILER_OVERRIDES)
+	$(MAKE) ocaml $(CROSS_COMPILER_OVERRIDES)
+	$(MAKE) dynlink-all $(CROSS_OVERRIDES)
+	$(MAKE) -C otherlibs all $(CROSS_OVERRIDES)
+	$(MAKE) runtimeopt
+	$(MAKE) ocamlc.opt ocamlopt.opt $(TOOLS_NATIVE_TARGETS) \
+	  $(CROSS_COMPILER_OVERRIDES) "$(HOST_ZSTD_LIBS)"
+	$(MAKE) libraryopt $(CROSS_OVERRIDES)
+	$(MAKE) otherlibrariesopt ocamltoolsopt $(CROSS_OVERRIDES)
+	$(MAKE) tools-allopt.opt $(CROSS_COMPILER_OVERRIDES)
+	# We now build the compiler libs again, but for target this time
+	rm -f $(ocamlcommon_NCOBJS) $(ocamlmiddleend_NCOBJS) \
+	  $(ocamlbytecomp_NCOBJS) $(ocamloptcomp_NCOBJS) \
+	  $(ocamltoplevel_NCOBJS) $(CROSSCOMPILERLIBS)
+	$(MAKE) $(CROSSCOMPILERLIBS) $(CROSS_COMPILERLIBS_OVERRIDES)
+
+INSTALL_OVERRIDES=build_ocamldoc=false WITH_DEBUGGER= OCAMLRUN=ocamlrun
+
+.PHONY: installcross
+installcross:
+	# Create dummy files to keep `install` happy
+	touch \
+	  $(addprefix toplevel/, \
+	    $(foreach ext,cmi cmt cmti cmx, native/nat__dummy__.$(ext)) \
+	      all__dummy__.cmx topstart.o native/tophooks.cmi)
+	$(LN) `command -v ocamllex` lex/ocamllex.opt$(EXE)
+	$(LN) `command -v ocamlyacc` yacc/ocamlyacc.opt$(EXE)
+	# Real installation
+	$(MAKE) install $(INSTALL_OVERRIDES)
-- 
2.47.2

