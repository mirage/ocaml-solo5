From 0eac47067f78c99373d6df727fcf3c115d2da141 Mon Sep 17 00:00:00 2001
From: Samuel Hym <samuel@tarides.com>
Date: Fri, 31 Jan 2025 19:13:28 +0100
Subject: [PATCH 18/21] Output the `.size` and `.type` directives based on
 `configure` result

Uniformly rely on the detection during `configure` of whether the
`.size` and `.type` directives are generated by the C compiler to decide
whether to output them
Define two macros in `asm.h` and two functions in `Emitaux` to output
those directives to factorize them; to do so, `Emitaux.emit_symbol`
knows the special macOS case

Before that patch, the `.size` and `.type` directives were:
- on x86_64:
  - generated by `emit.mlp` only on Linux and GNU OSes; `.size` was
    generated for frametables only for a definite list of OSes, `.type`
    was never generated for frametables
  - present in `amd64.S` only on Linux and GNU OSes; the `.type`
    directives was present for functions on all but macOS, Cygwin,
    MinGW, MSVC
- on ARM:
  - generated by `emit.mlp` except on macOS
  - present in `arm64.S` except on macOS
- on RISC-V:
  - always generated by `emit.mlp`; `.size` was not generated for
    frametables
  - always present in `riscv.S`
- on POWER:
  - always generated by `emit.mlp`; `.size` was not generated for
    frametables
  - always present in `power.S`
- on S/390:
  - always generated by `emit.mlp` for `.type`, never generated for
    `.size`
  - always present in `s390x.S` for `.type`, never present for `.size`
---
 asmcomp/amd64/emit.mlp |  7 +++----
 asmcomp/arm64/emit.mlp | 32 ++++++++++----------------------
 asmcomp/emitaux.ml     | 21 +++++++++++++++++++++
 asmcomp/emitaux.mli    | 10 ++++++++++
 asmcomp/power/emit.mlp |  7 ++++---
 asmcomp/riscv/emit.mlp |  7 ++++---
 asmcomp/s390x/emit.mlp |  6 ++++--
 runtime/amd64.S        |  8 ++------
 runtime/arm64.S        |  8 ++++----
 runtime/caml/asm.h     | 12 ++++++++++++
 runtime/power.S        |  4 ++--
 runtime/riscv.S        |  8 ++++----
 runtime/s390x.S        |  5 +++--
 13 files changed, 83 insertions(+), 52 deletions(-)

diff --git a/asmcomp/amd64/emit.mlp b/asmcomp/amd64/emit.mlp
index d35ac2d710..25e2a16b1c 100644
--- a/asmcomp/amd64/emit.mlp
+++ b/asmcomp/amd64/emit.mlp
@@ -941,14 +941,12 @@ let fundecl fundecl =
     end;
   end;
   cfi_endproc ();
-  begin match system with
-  | S_gnu | S_linux ->
+  if Config.asm_size_type_directives then begin
       D.type_ (emit_symbol fundecl.fun_name) "@function";
       D.size (emit_symbol fundecl.fun_name)
         (ConstSub (
             ConstThis,
             ConstLabel (emit_symbol fundecl.fun_name)))
-  | _ -> ()
   end
 
 (* Emission of data *)
@@ -1078,8 +1076,9 @@ let end_assembly() =
       efa_string = (fun s -> D.bytes (s ^ "\000"))
     };
 
-  if system = S_linux || system = S_freebsd || system = S_netbsd || system = S_openbsd then begin
+  if Config.asm_size_type_directives then begin
     let frametable = emit_symbol (Compilenv.make_symbol (Some "frametable")) in
+    D.type_ frametable "@object";
     D.size frametable (ConstSub (ConstThis, ConstLabel frametable))
   end;
 
diff --git a/asmcomp/arm64/emit.mlp b/asmcomp/arm64/emit.mlp
index ba36dbdd84..d653fbdada 100644
--- a/asmcomp/arm64/emit.mlp
+++ b/asmcomp/arm64/emit.mlp
@@ -45,23 +45,11 @@ let label_prefix =
 let emit_label lbl =
   emit_string label_prefix; emit_int lbl
 
-(* Symbols *)
-
-let emit_symbol s =
-  if macosx then emit_string "_";
-  Emitaux.emit_symbol s
-
 (* Object types *)
 
-let emit_symbol_type emit_lbl_or_sym lbl_or_sym ty =
-  if not macosx then begin
-    `	.type	{emit_lbl_or_sym lbl_or_sym}, %{emit_string ty}\n`
-  end
-
-
-let emit_symbol_size sym =
-  if not macosx then begin
-    `	.size	{emit_symbol sym}, .-{emit_symbol sym}\n`
+let emit_label_type lbl ty =
+  if Config.asm_size_type_directives then begin
+    `	.type	{emit_label lbl}, {emit_string ty}\n`
   end
 
 (* Output a pseudo-register *)
@@ -1068,7 +1056,7 @@ let fundecl fundecl =
   emit_named_text_section fundecl.fun_name;
   `	.align	3\n`;
   `	.globl	{emit_symbol fundecl.fun_name}\n`;
-  emit_symbol_type emit_symbol fundecl.fun_name "function";
+  emit_type_directive fundecl.fun_name "%function";
   (* Dynamic stack checking *)
   let stack_threshold_size = Config.stack_threshold * 8 in (* bytes *)
   let max_frame_size = frame_size env + fundecl.fun_extra_stack_used in
@@ -1119,8 +1107,8 @@ let fundecl fundecl =
   assert (List.length env.bound_error_sites = num_check_bound);
 
   cfi_endproc();
-  emit_symbol_type emit_symbol fundecl.fun_name "function";
-  emit_symbol_size fundecl.fun_name;
+  emit_type_directive fundecl.fun_name "%function";
+  emit_size_directive fundecl.fun_name;
   emit_literals env
 
 (* Emission of data *)
@@ -1193,10 +1181,10 @@ let end_assembly () =
   `{emit_symbol lbl}:\n`;
   emit_frames
     { efa_code_label = (fun lbl ->
-                       emit_symbol_type emit_label lbl "function";
+                       emit_label_type lbl "%function";
                        `	.quad	{emit_label lbl}\n`);
       efa_data_label = (fun lbl ->
-                       emit_symbol_type emit_label lbl "object";
+                       emit_label_type lbl "%object";
                        `	.quad	{emit_label lbl}\n`);
       efa_8 = (fun n -> `	.byte	{emit_int n}\n`);
       efa_16 = (fun n -> `	.short	{emit_int n}\n`);
@@ -1207,6 +1195,6 @@ let end_assembly () =
                            `	.long	{emit_label lbl} - . + {emit_int32 ofs}\n`);
       efa_def_label = (fun lbl -> `{emit_label lbl}:\n`);
       efa_string = (fun s -> emit_string_directive "	.asciz	" s) };
-  emit_symbol_type emit_symbol lbl "object";
-  emit_symbol_size lbl;
+  emit_type_directive lbl "%object";
+  emit_size_directive lbl;
   emit_nonexecstack_note ()
diff --git a/asmcomp/emitaux.ml b/asmcomp/emitaux.ml
index c115eacbbe..98274742e8 100644
--- a/asmcomp/emitaux.ml
+++ b/asmcomp/emitaux.ml
@@ -35,7 +35,10 @@ let emit_printf fmt =
 
 let emit_int32 n = emit_printf "0x%lx" n
 
+let macosx = Config.system = "macosx"
+
 let emit_symbol s =
+  if macosx then output_char !output_channel '_';
   for i = 0 to String.length s - 1 do
     let c = s.[i] in
     match c with
@@ -111,6 +114,24 @@ let emit_float64_split_directive directive x =
 let emit_float32_directive directive x =
   emit_printf "\t%s\t0x%lx\n" directive x
 
+let emit_size_directive symbol =
+  if Config.asm_size_type_directives then begin
+    emit_string "\t.size\t";
+    emit_symbol symbol;
+    emit_string ", . - ";
+    emit_symbol symbol;
+    emit_char '\n'
+  end
+
+let emit_type_directive symbol ty =
+  if Config.asm_size_type_directives then begin
+    emit_string "\t.type\t";
+    emit_symbol symbol;
+    emit_string ", ";
+    emit_string ty;
+    emit_char '\n'
+  end
+
 let emit_nonexecstack_note () =
   if Config.with_nonexecstack_note then begin
     emit_string "\t.section .note.GNU-stack,\"\",%progbits\n"
diff --git a/asmcomp/emitaux.mli b/asmcomp/emitaux.mli
index a474c9f902..37f1b18fd4 100644
--- a/asmcomp/emitaux.mli
+++ b/asmcomp/emitaux.mli
@@ -30,6 +30,16 @@ val emit_float64_directive: string -> int64 -> unit
 val emit_float64_split_directive: string -> int64 -> unit
 val emit_float32_directive: string -> int32 -> unit
 
+val emit_size_directive: string -> unit
+(** [emit_size_directive symbol]
+    Emit a [.size] assembler directive for the given [symbol] when it is
+    supported by the assembler *)
+
+val emit_type_directive: string -> string -> unit
+(** [emit_type_directive symbol typ]
+    Emit a [.type] assembler directive that [symbol] has type [typ] when it is
+    supported by the assembler *)
+
 val emit_nonexecstack_note : unit -> unit
 (** Emit a [.note.GNU-stack] section when it is supported by the linker *)
 
diff --git a/asmcomp/power/emit.mlp b/asmcomp/power/emit.mlp
index 7d586e5032..f91c87d121 100644
--- a/asmcomp/power/emit.mlp
+++ b/asmcomp/power/emit.mlp
@@ -1018,7 +1018,7 @@ let fundecl fundecl =
   end;
   (* Function entry point *)
   `	.globl	{emit_symbol fundecl.fun_name}\n`;
-  `	.type	{emit_symbol fundecl.fun_name}, @function\n`;
+  emit_type_directive fundecl.fun_name "@function";
   `{emit_symbol fundecl.fun_name}:\n`;
   `0:	addis	2, 12, (.TOC. - 0b)@ha\n`;
   `	addi	2, 2, (.TOC. - 0b)@l\n`;
@@ -1054,7 +1054,7 @@ let fundecl fundecl =
   (* Emit the glue code to handle bound errors *)
   emit_call_bound_errors env;
   cfi_endproc();
-  `	.size	{emit_symbol fundecl.fun_name}, . - {emit_symbol fundecl.fun_name}\n`;
+  emit_size_directive fundecl.fun_name;
   (* Emit the numeric literals *)
   if env.float_literals <> [] then begin
     emit_string rodata_space;
@@ -1082,7 +1082,7 @@ let fundecl fundecl =
 
 let declare_global_data s =
   `	.globl	{emit_symbol s}\n`;
-  `	.type	{emit_symbol s}, @object\n`
+  emit_type_directive s "@object"
 
 let emit_item = function
     Cglobal_symbol s ->
@@ -1166,6 +1166,7 @@ let end_assembly() =
       efa_def_label = (fun l -> `{emit_label l}:\n`);
       efa_string = (fun s -> emit_bytes_directive "	.byte	" (s ^ "\000"))
      };
+  emit_size_directive lbl;
   (* Emit the TOC entries *)
   emit_string toc_space;
   emit_toctable();
diff --git a/asmcomp/riscv/emit.mlp b/asmcomp/riscv/emit.mlp
index b27833d180..b612a61218 100644
--- a/asmcomp/riscv/emit.mlp
+++ b/asmcomp/riscv/emit.mlp
@@ -619,7 +619,7 @@ let rec emit_all env = function
 let fundecl fundecl =
   let env = mk_env fundecl in
   `	.globl	{emit_symbol fundecl.fun_name}\n`;
-  `	.type	{emit_symbol fundecl.fun_name}, @function\n`;
+  emit_type_directive fundecl.fun_name "@function";
   emit_named_text_section fundecl.fun_name;
   `	.align	2\n`;
   `{emit_symbol fundecl.fun_name}:\n`;
@@ -666,7 +666,7 @@ let fundecl fundecl =
   end;
 
   cfi_endproc();
-  `	.size	{emit_symbol fundecl.fun_name}, .-{emit_symbol fundecl.fun_name}\n`;
+  emit_size_directive fundecl.fun_name;
   (* Emit the float literals *)
   if env.float_literals <> [] then begin
     `	{emit_string rodata_space}\n`;
@@ -682,7 +682,7 @@ let fundecl fundecl =
 
 let declare_global_data s =
   `	.globl	{emit_symbol s}\n`;
-  `	.type	{emit_symbol s}, @object\n`
+  emit_type_directive s "@object"
 
 let emit_item = function
   | Cglobal_symbol s ->
@@ -760,4 +760,5 @@ let end_assembly() =
       efa_def_label = (fun l -> `{emit_label l}:\n`);
       efa_string = (fun s -> emit_bytes_directive "	.byte	" (s ^ "\000"))
      };
+  emit_size_directive lbl;
   emit_nonexecstack_note ()
diff --git a/asmcomp/s390x/emit.mlp b/asmcomp/s390x/emit.mlp
index 787d590d6d..d38dd55754 100644
--- a/asmcomp/s390x/emit.mlp
+++ b/asmcomp/s390x/emit.mlp
@@ -718,7 +718,7 @@ let fundecl fundecl =
   let env = mk_env fundecl in
   `	.globl	{emit_symbol fundecl.fun_name}\n`;
   emit_debug_info fundecl.fun_dbg;
-  `	.type	{emit_symbol fundecl.fun_name}, @function\n`;
+  emit_type_directive fundecl.fun_name "@function";
   emit_named_text_section fundecl.fun_name;
   `	.align	8\n`;
   `{emit_symbol fundecl.fun_name}:\n`;
@@ -763,6 +763,7 @@ let fundecl fundecl =
   end;
 
   cfi_endproc ();
+  emit_size_directive fundecl.fun_name;
   (* Emit the numeric literals *)
   if env.float_literals <> [] || env.int_literals <> [] then begin
     emit_string rodata_space;
@@ -782,7 +783,7 @@ let fundecl fundecl =
 
 let declare_global_data s =
   `	.globl	{emit_symbol s}\n`;
-  `	.type	{emit_symbol s}, @object\n`
+  emit_type_directive s "@object"
 
 let emit_item = function
     Cglobal_symbol s ->
@@ -865,4 +866,5 @@ let end_assembly() =
       efa_def_label = (fun l -> `{emit_label l}:\n`);
       efa_string = (fun s -> emit_bytes_directive "	.byte	" (s ^ "\000"))
      };
+  emit_size_directive lbl;
   emit_nonexecstack_note ()
diff --git a/runtime/amd64.S b/runtime/amd64.S
index 3f96122476..80f8ffff3e 100644
--- a/runtime/amd64.S
+++ b/runtime/amd64.S
@@ -69,18 +69,14 @@
 #define FUNCTION(name) \
         TEXT_SECTION(name); \
         .globl name; \
-        .type name,@function; \
+        TYPE_DIRECTIVE(name,@function); \
         .align FUNCTION_ALIGN; \
         name:
 
 #endif
 
-#if defined(SYS_linux) || defined(SYS_gnu)
 #define ENDFUNCTION(name) \
-        .size name, . - name
-#else
-#define ENDFUNCTION(name)
-#endif
+        SIZE_DIRECTIVE(name)
 
 #ifdef WITH_FRAME_POINTERS
 #define FRAME_POINTER_SIZE   8
diff --git a/runtime/arm64.S b/runtime/arm64.S
index 2a4e50241a..de4f8fb57d 100644
--- a/runtime/arm64.S
+++ b/runtime/arm64.S
@@ -138,19 +138,19 @@ G(\name):
         TEXT_SECTION(name); \
         .align  2; \
         .globl  G(name); \
-        .type   G(name), %function; \
+        TYPE_DIRECTIVE(G(name),%function) \
 G(name):
 #define END_FUNCTION(name) \
-        .size   G(name), .-G(name)
+        SIZE_DIRECTIVE(G(name))
 
 #define OBJECT(name) \
         .data; \
         .align  3; \
         .globl  G(name); \
-        .type   G(name), %object; \
+        TYPE_DIRECTIVE(G(name),%object) \
 G(name):
 #define END_OBJECT(name) \
-        .size   G(name), .-G(name)
+        SIZE_DIRECTIVE(G(name))
 #endif
 
 /* Function prologue and epilogue */
diff --git a/runtime/caml/asm.h b/runtime/caml/asm.h
index a889694446..77372ea11e 100644
--- a/runtime/caml/asm.h
+++ b/runtime/caml/asm.h
@@ -45,6 +45,18 @@
 #define CFI_STARTPROC
 #endif
 
+/* .size and .type directives, with explicit end-of-directive semi-colons */
+
+#ifdef ASM_SIZE_TYPE_DIRECTIVES
+#define SIZE_DIRECTIVE(name) \
+        .size name, . - name;
+#define TYPE_DIRECTIVE(name,ty) \
+        .type name, ty;
+#else
+#define SIZE_DIRECTIVE(name)
+#define TYPE_DIRECTIVE(name,ty)
+#endif
+
 /* Non-executable stack note */
 
 #ifdef WITH_NONEXECSTACK_NOTE
diff --git a/runtime/power.S b/runtime/power.S
index 5cb0de0493..47c711ca3a 100644
--- a/runtime/power.S
+++ b/runtime/power.S
@@ -89,7 +89,7 @@ caml_hot.code_end:
 .macro FUNCTION name
         TEXT_SECTION \name
         .globl \name
-        .type \name, @function
+        TYPE_DIRECTIVE(\name,@function)
 \name:
 0:      addis   2, 12, .TOC.- 0b@ha
         addi    2, 2,  .TOC.- 0b@l
@@ -97,7 +97,7 @@ caml_hot.code_end:
 .endm
 
 .macro ENDFUNCTION name
-       .size \name, . - \name
+        SIZE_DIRECTIVE(\name)
 .endm
 
 /* Function prologue and epilogue */
diff --git a/runtime/riscv.S b/runtime/riscv.S
index ac3131dc51..4a300578e3 100644
--- a/runtime/riscv.S
+++ b/runtime/riscv.S
@@ -80,13 +80,13 @@ caml_hot.code_end:
         TEXT_SECTION(name); \
         .align 2; \
         .globl name; \
-        .type  name, @function; \
+        TYPE_DIRECTIVE(name,@function) \
 name:; \
         CFI_STARTPROC
 
 #define END_FUNCTION(name) \
         CFI_ENDPROC; \
-        .size name, .-name
+        SIZE_DIRECTIVE(name)
 
 #if defined(__PIC__)
         .option pic
@@ -100,10 +100,10 @@ name:; \
         .data; \
         .align  3; \
         .globl  name; \
-        .type   name, @object; \
+        TYPE_DIRECTIVE(name,@object) \
 name:
 #define END_OBJECT(name) \
-        .size   name, .-name
+        SIZE_DIRECTIVE(name)
 
 /* Function prologue and epilogue */
 
diff --git a/runtime/s390x.S b/runtime/s390x.S
index 70a44575fb..740d2a5496 100644
--- a/runtime/s390x.S
+++ b/runtime/s390x.S
@@ -60,10 +60,11 @@ caml_hot.code_end:
 #define FUNCTION(name) \
         TEXT_SECTION(name); \
         .globl name; \
-        .type name,@function; \
+        TYPE_DIRECTIVE(name,@function) \
         name:
 
-#define ENDFUNCTION(name)
+#define ENDFUNCTION(name) \
+        SIZE_DIRECTIVE(name)
 
 /* Stack space to be reserved by the caller of a C function */
 #define RESERVED_STACK          160
-- 
2.47.2

